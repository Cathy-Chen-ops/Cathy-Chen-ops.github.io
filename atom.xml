<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Cathy-Chen-ops.github.io</id>
    <title>CathyChenの学习之旅</title>
    <updated>2021-07-17T14:28:09.871Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Cathy-Chen-ops.github.io"/>
    <link rel="self" href="https://Cathy-Chen-ops.github.io/atom.xml"/>
    <subtitle>今天不学习
明天变垃圾</subtitle>
    <logo>https://Cathy-Chen-ops.github.io/images/avatar.png</logo>
    <icon>https://Cathy-Chen-ops.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, CathyChenの学习之旅</rights>
    <entry>
        <title type="html"><![CDATA[CH1 Why Program?]]></title>
        <id>https://Cathy-Chen-ops.github.io/post/ch1-why-program/</id>
        <link href="https://Cathy-Chen-ops.github.io/post/ch1-why-program/">
        </link>
        <updated>2021-07-17T14:20:44.000Z</updated>
        <content type="html"><![CDATA[<p>This very fact that computers are good at things that humans are not is why you need to become skilled at talking “computer language”.</p>
<h3 id="11-creativity-and-motivation">1.1 Creativity and motivation</h3>
<p>Building useful, elegant, and clever programs for others to use is a very creative activity.</p>
<p>When you first start, you will be both the programmer and the end user of your programs. As you gain skill as a programmer and programming feels more creative to you, your thoughts may turn toward developing programs for others.</p>
<h3 id="12-computer-hardware-architecture">1.2 Computer hardware architecture</h3>
<img src="C:\Users\15367\AppData\Roaming\Typora\typora-user-images\image-20210716195157380.png" alt="image-20210716195157380" style="zoom:67%;" />
<p>As a programmer you will mostly be “talking” to the CPU and telling it what to do next. Sometimes you will tell the CPU to use the main memory, secondary memory, network, or the input/output devices.</p>
<h3 id="13-understanding-programming">1.3 Understanding programming</h3>
<p>In a sense, you need two skills to be a programmer:</p>
<ul>
<li>First, you need to know the programming language (Python) - you need to know the vocabulary and the grammar.</li>
<li>Second, you need to “tell a story”. In writing a story, you combine words and sentences to convey an idea to the reader.</li>
</ul>
<h3 id="14-words-and-sentences">1.4 Words and sentences</h3>
<p>reserved words in Python：</p>
<img src="C:\Users\15367\AppData\Roaming\Typora\typora-user-images\image-20210716205028536.png" alt="image-20210716205028536" style="zoom:67%;" />
<h3 id="15-conversing-with-python">1.5 Conversing with Python</h3>
<h3 id="16-terminology-interpreter-and-compiler">1.6 Terminology: Interpreter and compiler</h3>
<p>Python is a high-level language. The actual hardware inside the Central Processing Unit (CPU) does not understand any of these high-level languages. The CPU understands a language we call machine language.</p>
<p>Instead we build various translators to allow programmers to write in high-level languages like Python or JavaScript and these translators convert the programs to machine language for actual execution by the CPU. These programming language translators fall into two general categories: (1) interpreters and  (2) compilers.</p>
<p>An interpreter reads the source code of the program as written by the programmer, parses the source code, and interprets the instructions on the fly. Python is an interpreter and when we are running Python interactively, we can type a line of Python (a sentence) and Python processes it immediately and is ready for us to type another line of Python.</p>
<p>The Python interpreter is written in a high-level language called “C”. So Python is a program itself and it is compiled into machine code.</p>
<h3 id="17-writing-a-program">1.7 Writing a program</h3>
<p>When we want to write a program, we use a text editor to write the Python instructions into a file, which is called a script. By convention, Python scripts have names that end with .py.</p>
<pre><code class="language-python">$ cat hello.py 
print('Hello world!') 
$ python hello.py 
Hello world!
</code></pre>
<h3 id="18-what-is-a-program">1.8 What is a program?</h3>
<h3 id="19-the-building-blocks-of-programs">1.9 The building blocks of programs</h3>
<p>There are some low-level conceptual patterns that we use to construct programs.</p>
<ul>
<li><strong>input</strong> Get data from the “outside world”. This might be reading data from a file, or even some kind of sensor like a microphone or GPS. In our initial programs, our input will come from the user typing data on the keyboard.</li>
<li><strong>output</strong> Display the results of the program on a screen or store them in a file or perhaps write them to a device like a speaker to play music or speak text.</li>
<li><strong>sequential execution</strong> Perform statements one after another in the order they are encountered in the script.</li>
<li><strong>conditional execution</strong> Check for certain conditions and then execute or skip a sequence of statements.</li>
<li><strong>repeated execution</strong> Perform some set of statements repeatedly, usually with some variation.</li>
<li><strong>reuse</strong> Write a set of instructions once and give them a name and then reuse those instructions as needed throughout your program.</li>
</ul>
<h3 id="110-what-could-possibly-go-wrong">1.10 What could possibly go wrong?</h3>
<ul>
<li><strong>Syntax errors</strong> A syntax error means that you have violated the “grammar” rules of Python. Python does its best to point right at the line and character where it noticed it was confused. The only tricky bit of syntax errors is that sometimes the mistake that needs fixing is actually earlier in the program than where Python noticed it was confused. So the line and character that Python indicates in a syntax error may just be a starting point for your investigation.</li>
<li><strong>Logic errors</strong> A logic error is when your program has good syntax but there is a mistake in the order of the statements or perhaps a mistake in how the statements relate to one another.</li>
<li><strong>Semantic errors</strong> A semantic error is when your description of the steps to take is syntactically perfect and in the right order, but there is simply a mistake in the program. The program is perfectly correct but it does not do what you intended for it to do.</li>
</ul>
<h3 id="111-debugging">1.11 Debugging</h3>
<p>Debugging is the process of finding the cause of the error in your code. When you are debugging a program, and especially if you are working on a hard bug, there are four things to try:</p>
<ul>
<li><strong>reading</strong> Examine your code, read it back to yourself, and check that it says what you meant to say.</li>
<li><strong>running</strong> Experiment by making changes and running different versions. Often if you display the right thing at the right place in the program, the problem becomes obvious, but sometimes you have to spend some time to build scaffolding.</li>
<li><strong>ruminating</strong> Take some time to think! What kind of error is it: syntax, runtime, semantic? What information can you get from the error messages, or from the output of the program? What kind of error could cause the problem you’re seeing? What did you change last, before the problem appeared?</li>
<li><strong>retreating</strong> At some point, the best thing to do is back off, undoing recent changes, until you get back to a program that works and that you understand. Then you can start rebuilding.</li>
</ul>
<h3 id="112-the-learning-journey">1.12 The learning journey</h3>
<h3 id="113-glossary">1.13 Glossary</h3>
<ul>
<li><strong>compile</strong> To translate a program written in a high-level language into a low-level language all at once, in preparation for later execution.</li>
<li><strong>interpret</strong> To execute a program in a high-level language by translating it one line at a time.</li>
<li><strong>parse</strong> To examine a program and analyze the syntactic structure.</li>
<li><strong>source code</strong> A program in a high-level language.</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Anaconda下载及Tensorflow、Pytorch安装]]></title>
        <id>https://Cathy-Chen-ops.github.io/post/anaconda-xia-zai-ji-tensorflowpytorch-an-zhuang/</id>
        <link href="https://Cathy-Chen-ops.github.io/post/anaconda-xia-zai-ji-tensorflowpytorch-an-zhuang/">
        </link>
        <updated>2021-06-02T08:59:08.000Z</updated>
        <content type="html"><![CDATA[<h2 id="anaconda下载">Anaconda下载</h2>
<ol>
<li>官网<a href="https://www.anaconda.com/">Anaconda | The World's Most Popular Data Science Platform</a></li>
<li>清华镜像<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">Index of /anaconda/archive/ | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></li>
</ol>
<h2 id="anaconda包管理与环境管理">Anaconda包管理与环境管理</h2>
<ul>
<li>包管理：conda命令/pip命令</li>
<li>环境管理：conda环境管理</li>
</ul>
<h2 id="conda换国内源">conda换国内源</h2>
<p>参考<a href="https://blog.csdn.net/qq_43198568/article/details/105626024">Anaconda之conda换国内源_你的大数据学长-CSDN博客_conda国内源</a>和<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">anaconda | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p>
<h2 id="tensorflow20安装">Tensorflow2.0安装</h2>
<p>命令行操作:</p>
<ul>
<li>
<p>创建环境conda create -n tensorflow python=3.6</p>
</li>
<li>
<p>激活环境conda activate tensorflow</p>
</li>
<li>
<p>安装所需要的包</p>
<p>pip install numpy matplotlib Pillow scikit-learn pandas -i https://pypi.tuna.tsinghua.edu.cn/simple</p>
</li>
<li>
<p>安装tensorflow2.0</p>
<p>pip install tensorflow==2.4.0 -i https://pypi.tuna.tsinghua.edu.cn/simple</p>
</li>
<li>
<p>测试</p>
</li>
</ul>
<h2 id="在jupyter中使用tensorflow">在jupyter中使用tensorflow</h2>
<ul>
<li>
<p>pip install ipython -i https://pypi.tuna.tsinghua.edu.cn/simple</p>
<p>pip install jupyter -i https://pypi.tuna.tsinghua.edu.cn/simple</p>
<p>(在配置新的conda环境时，可以用conda创建环境，尽可能使用pip安装代码包，如果某个代码包在pip上不提供，再用conda install。这样可以尽可能避开conda检查兼容性的问题。)</p>
</li>
<li>
<p>安装当前环境的内核:python -m ipykernel install --user</p>
</li>
<li>
<p>jupyter notebook进入jupyter notebook</p>
</li>
</ul>
<p>P.S.注意兼容性问题，前两次都用python3.8搭建的tensorflow2.4.0,结果jupyter出现kernel error,显示DLL load failed while importing win32api: 找不到指定的模块；无法解决。后用python3.6搭tensorflow2.4.0成功。（吐血了😣）</p>
<h2 id="修改jupyter-notebook工作空间">修改Jupyter Notebook工作空间</h2>
<ul>
<li>
<p>命令行输入jupyter notebook --generate-config</p>
</li>
<li>
<p>根据路径修改jupyter_notebook_config.py文件</p>
<p>找到</p>
<pre><code class="language-python">## The directory to use for notebooks and kernels. 
## c.NotebookApp.notebook_dir = ''
</code></pre>
<p>修改为</p>
<pre><code class="language-python">## The directory to use for notebooks and kernels.
c.NotebookApp.notebook_dir = 'D:\jupyter_doc'
</code></pre>
</li>
</ul>
<h2 id="pytorch安装">PyTorch安装</h2>
<ul>
<li>
<p>创建环境</p>
<p>conda create -n pytorch python=3.6</p>
<p>conda activate pytorch</p>
</li>
<li>
<p>添加PyTorch镜像</p>
<p>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/win-64/</p>
</li>
<li>
<p>进入官网<a href="https://pytorch.org/get-started/locally/">Start Locally | PyTorch</a>查询下载语句</p>
<p>cpu版本为：conda install pytorch torchvision torchaudio cpuonly（注意去掉-c pytorch）</p>
</li>
<li>
<p>测试</p>
</li>
</ul>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://Cathy-Chen-ops.github.io/post/hello-gridea/</id>
        <link href="https://Cathy-Chen-ops.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>